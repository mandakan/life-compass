name: CI/CD Testing Pipeline

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  ci:
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write
      contents: read
      actions: write
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '23'

      # Cache node modules for faster builds
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Run linting as an additional quality check
      - name: Run Linting
        id: lint
        run: |
          echo "### Linting Results 📝" >> $GITHUB_STEP_SUMMARY
          if npm run lint > lint_output.txt 2>&1; then
            echo "✅ No linting issues found." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Linting issues detected!" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            tail -n 10 lint_output.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            exit 1 # Fail the job if linting fails
          fi

      # Run security scan as an additional quality check
      - name: Run Security Scan
        id: security_scan
        run: |
          echo "### Security Scan Results 🔒" >> $GITHUB_STEP_SUMMARY
          if npm audit --audit-level=moderate > audit_output.txt 2>&1; then
            echo "✅ No security vulnerabilities detected." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Security vulnerabilities found!" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            tail -n 10 audit_output.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            exit 1 # Fail the job if security vulnerabilities are found
          fi

      # Run tests using Vitest with a JUnit reporter and a retry mechanism for flaky tests
      - name: Run Tests
        run: |
          # Execute Vitest. Vitest configuration should handle retries (if configured) and output a JUnit report.
          npx vitest run --reporter=junit --outputFile=test-results.xml
        continue-on-error: false

      # Report test results using GITHUB_STEP_SUMMARY for quick insights
      - name: Generate Job Summary from Vitest
        run: |
          echo "### Test Summary 🚀" >> $GITHUB_STEP_SUMMARY

          # Initialize counters
          TOTAL=0
          PASSED=0
          FAILURES=0
          ERRORS=0
          SKIPPED=0

          # Iterate over all JUnit XML test report files
          for file in target/surefire-reports/*.xml; do
            if [[ -f "$file" ]]; then
              TESTS=$(grep -oP '(?<=tests=")[0-9]+' "$file" | awk '{s+=$1} END {print s}')
              FAILED=$(grep -oP '(?<=failures=")[0-9]+' "$file" | awk '{s+=$1} END {print s}')
              ERR=$(grep -oP '(?<=errors=")[0-9]+' "$file" | awk '{s+=$1} END {print s}')
              SKIP=$(grep -oP '(?<=skipped=")[0-9]+' "$file" | awk '{s+=$1} END {print s}')

              TOTAL=$((TOTAL + TESTS))
              FAILURES=$((FAILURES + FAILED))
              ERRORS=$((ERRORS + ERR))
              SKIPPED=$((SKIPPED + SKIP))
            fi
          done

          # Ensure no empty values (set to 0 if empty)
          TOTAL=${TOTAL:-0}
          FAILURES=${FAILURES:-0}
          ERRORS=${ERRORS:-0}
          SKIPPED=${SKIPPED:-0}
          PASSED=$((TOTAL - FAILURES - ERRORS - SKIPPED))

          echo "| Tests | Passed | Failed | Errors | Skipped |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|--------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| $TOTAL | $PASSED | $FAILURES | $ERRORS | $SKIPPED |" >> $GITHUB_STEP_SUMMARY

        if: always() # Run even if tests fail

      # Report test results using test-reporter for detailed insights
      - name: Report Test Results
        uses: dorny/test-reporter@v1
        with:
          name: VitestTest Results
          path: test-results.xml  # Adjust based on your report location
          reporter: java-junit  # Use 'java-junit' for JUnit XML reports
          fail-on-error: true
